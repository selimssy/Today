<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ali.today.user.repository.IUserMapper">

	<!-- DB 컬럼명과 VO 클래스의 필드명 맵핑작업 -->
	<resultMap id="UserMap" type="com.ali.today.user.model.UserVO">		
		<id property="userId" column="user_id" />
		<result property="userCode" column="user_code"/>
		<result property="password" column="password"/>
		<result property="name" column="name"/>
		<result property="nickname" column="nickname"/>
		<result property="imagePath" column="image_path"/>
		<result property="email" column="email"/>
		<result property="regDate" column="reg_date"/>
		<result property="sessionId" column="session_id"/>
		<result property="limitTime" column="limit_time"/>
		<result property="contentsCnt" column="contents_cnt"/>
		<result property="petCnt" column="pet_count"/>
		<result property="replyCnt" column="reply_count"/>
		<result property="petLetter" column="pet_letter"/>
		<collection property="pet" resultMap="PetMap"/>	
	</resultMap>
	
	
	<resultMap id="PetMap" type="com.ali.today.user.model.PetVO">		
		<id property="petId" column="pet_id" />
		<result property="userId" column="user_id"/>
		<result property="petName" column="pet_name"/>
		<result property="petSpecies" column="pet_species"/>
		<result property="age" column="age"/>
		<result property="gender" column="gender"/>
		<result property="feature" column="feature"/>
		<result property="imagePath" column="image_path"/>
		<result property="instagram" column="instagram"/>
		<result property="youtube" column="youtube"/>
		<result property="open" column="open"/>	
		<result property="contents" column="contents"/>
		<result property="petLetter" column="pet_letter"/>
	</resultMap>
	

	<!-- 중복되는 동적 SQL문에 대한 처리(반려견 검색) -->
	<sql id="searchPet">  
		<if test="condition == 'petName'">  
		AND pet_name LIKE CONCAT('%',#{keyword},'%')
		</if>
		<if test="condition == 'petSpecies'">
		AND pet_species LIKE CONCAT('%',#{keyword},'%')
		</if>
		<if test="condition == 'feature'">
		AND feature LIKE CONCAT('%',#{keyword},'%')
		</if>
		<if test="condition == 'userId'">
		AND user_id LIKE CONCAT('%',#{keyword},'%')
		</if>
		<if test="condition == 'open'">
		AND open LIKE CONCAT('%',#{keyword},'%')
		</if>
	</sql>
	
	
	<!-- 중복되는 동적 SQL문에 대한 처리(회원 검색) -->
	<sql id="searchUser">  
		<if test="condition == 'userId'">  
		WHERE user_id LIKE CONCAT('%',#{keyword},'%')
		</if>
		<if test="condition == 'name'">
		WHERE name LIKE CONCAT('%',#{keyword},'%')
		</if>
		<if test="condition == 'nickname'">
		WHERE nickname LIKE CONCAT('%',#{keyword},'%')
		</if>		
		<if test="condition == 'email'">
		WHERE email LIKE CONCAT('%',#{keyword},'%')
		</if>
	</sql>
	
	
	<!-- 중복되는 동적 SQL문에 대한 처리(관리자 페이지 반려견 정렬방법) -->
	<sql id="orderPet">  
		<if test="order == 'regDate' or order.equals('')">  
		ORDER BY pet_id DESC
		</if>
		<if test="order == 'contents'">
		ORDER BY contents DESC
		</if>	
		<if test="order == 'updateDate'">
		ORDER BY update_date DESC
		</if>	
	</sql>
	
	<!-- 중복되는 동적 SQL문에 대한 처리(관리자 페이지 회원 정렬방법) -->
	<sql id="orderUser">  
		<if test="order == 'regDate' or order.equals('')">  
		ORDER BY reg_date DESC
		</if>
		<if test="order == 'contents'">
		ORDER BY contents_cnt DESC
		</if>	
		<if test="order == 'replyCnt'">
		ORDER BY reply_count DESC
		</if>	
	</sql>
	
	
	
	<!-- 회원가입 SQL -->
	<insert id="register">
		INSERT INTO user (user_id, password, name, nickname, email, user_code)
		VALUES (#{userId}, #{password}, #{name}, #{nickname}, #{email}, #{userCode})	
	</insert>
	
	
	<!-- 아이디 중복확인 SQL -->
	<select id="checkId" resultType="int">
		SELECT COUNT(*)
		FROM user
		WHERE user_id = #{userId}
	</select>
	
	
	<!-- 이메일 중복확인 SQL -->
	<select id="checkEmail" resultType="int">
		SELECT COUNT(*)
		FROM user
		WHERE email = #{email}
	</select>
	
	
	<!-- 회원정보 수정 -->
	<update id="modifyUser">
		UPDATE user 
		SET name = #{name}, nickname = #{nickname}, image_path = #{imagePath}
		WHERE user_id = #{userId}
	</update>
	
	
	<!-- 비밀번호 변경 -->
	<update id="modifyPw">
		UPDATE user 
		SET password = #{password}
		WHERE user_id = #{userId}
	</update>
	
	
	<!-- 회원탈퇴 SQL -->
	<delete id="delete">
		DELETE FROM user
		WHERE user_id = #{userId}
	</delete>
	
	
	<!-- 특정회원 조회 SQL -->
	<select id="selectOne" resultMap="UserMap">
		SELECT * FROM user
		WHERE user_id = #{userId}
	</select>
	
		
	<!-- 컨텐츠 수 증가 SQL -->
	<update id="upContentsCnt">
		UPDATE user 
		SET contents_cnt = contents_cnt + 1
		WHERE user_id = #{userId}
	</update>
	
	<!-- 컨텐츠 수 감소 SQL -->
	<update id="downContentsCnt">
		UPDATE user 
		SET contents_cnt = contents_cnt - 1
		WHERE user_id = #{userId}
	</update>
	
	
	<!-- 자동로그인을 체크할 경우 쿠키값(세션아이디)과 유지시간을 갱신 -->
	<!-- Mapper에게 데이터 여러개를 보내줄 때는 1.객체 2.Map 둘 중 하나로 보내야!!★ (이 경우엔 Map)-->
	<update id="keepLogin">
		UPDATE user
		SET session_id = #{sessionId},
		    limit_time = #{limitTime}
		WHERE user_id = #{userId}
	</update>
	
	
	
	<!-- 자동로그인을 했던 회원이 사이트 재방문시 로컬에 저장된 쿠키값과 일치하는 회원의 정보를 조회하는 SQL -->
	<select id="getUserWithSessionId" resultMap="UserMap">
		SELECT * FROM user
		WHERE session_id = #{sessionId} 
	</select>
	
	
	
	<!-- 아이디 찾기 - 이메일, 이름 일치 확인 -->
	<select id="emailName" resultMap="UserMap">
		SELECT name, user_id 
		FROM user 
		WHERE email = #{email} 
	</select>
	
	
	<!-- 비밀번호 찾기 - 아이디, 이름, 이메일 일치 확인 -->
	<select id="findPwInfo" resultType="int">
		SELECT count(*) FROM user
		WHERE user_id = #{userId} AND name = #{name} AND email = #{email}
	</select>
	
	
	
	<!-- 펫편지 수신 여부 변경 -->
	<update id="mdPetLetter">
		UPDATE user
		SET pet_letter = #{petLetter}
		WHERE user_id = #{userId}
	</update>
	
	
	
	<!-- user_code 중복확인 -->
	<select id="checkCode" resultType="int">
		SELECT COUNT(*) FROM user 
		WHERE user_code = #{userCode}
	</select>
	
	
	<!--  user_code -> user_id  -->
	<select id="CodeToId" resultType="string">
		SELECT user_id from user 
		WHERE user_code = #{userCode}
	</select>
	
	
	<!-- ******관리자 페이지******* -->
	<!-- 전체회원 조회 (검색, 페이징, 정렬) -->
	<select id="selectAll" resultMap="UserMap">
		SELECT u.user_id, u.reg_date, u.name, u.nickname, u.email, u.contents_cnt, 
		(select count(*) from pet where u.user_id=user_id) pet_count,
		(select count(*) from reply where u.user_id=replyer) reply_count
		FROM user u
		<include refid="searchUser"/>
		<include refid="orderUser"/>	
		LIMIT #{pageStart}, 20	
	</select>
	
	<!-- 검색, 페이징 처리한 회원 수 -->
	<select id="countUsers" resultType="int">
		SELECT COUNT(*)
		FROM user
		<include refid="searchUser"/>
	</select>
	
		
	
	<!-- //////////////////////////////////////////////////////////////////////////// -->
	
	
	<!-- 새로운 펫 등록 -->
	<insert id="registerPet">
		INSERT INTO pet (user_id, pet_name, pet_species, age, gender, feature, image_path, instagram, youtube, open)
		VALUES (#{userId}, #{petName}, #{petSpecies}, #{age}, #{gender}, #{feature}, #{imagePath}, #{instagram}, #{youtube}, #{open})	
	</insert>
	
	
	
	<!-- 반려동물 정보 수정 -->
	<update id="modifyPet">
		UPDATE pet SET pet_name = #{petName}, pet_species = #{petSpecies}, age = #{age}, gender = #{gender}, feature = #{feature}, 
			instagram = #{instagram}, youtube = #{youtube}, open = #{open}
		<if test="imagePath != null">  <!-- 이미지 변경한 경우 -->
		, image_path = #{imagePath}
		</if>	
		WHERE pet_id = #{petId}
	</update>
	
	
	
	<!-- 특정 반려동물 삭제 -->
	<delete id="deletePet">
		DELETE FROM pet
		WHERE pet_id = #{petId}
	</delete>	
	
	
	<!-- 특정 반려동물 조회 -->
	<select id="selectOnePet" resultMap="PetMap">
		SELECT * FROM pet
		WHERE pet_id = #{petId}
	</select>
	
	
	
	<!-- 내 계정에 등록된 반려동물 조회 -->
	<select id="selectAllPet" resultMap="PetMap">
		SELECT * FROM pet WHERE user_id = #{userId}
	</select>
	
	
	
	<!-- 회원 탈퇴시 내 계정의 모든 반려동물 삭제  -->
	<delete id="deleteUserPet">
		DELETE FROM pet
		WHERE user_id = #{userId}
	</delete>
	
	
	<!-- 유저, 반려동물 세션정보 -->
	<select id="UserPetInfo" resultMap="UserMap">
		SELECT u.user_id, u.name, u.nickname, p.pet_id 
		FROM user u LEFT JOIN pet p
		ON u.user_id = p.user_id
		WHERE u.user_id = #{userId} AND p.pet_id = #{petId}
	</select>
	
	
	
	<!-- 특정 계정 첫 번째 반려견 조회 -->
	<select id="firstPet" resultMap="PetMap">
		SELECT * FROM pet
		WHERE user_id= #{userId} LIMIT 1
	</select>
	
	
	<!-- 특정 계정 가장 최근에 등록한 반려견 petId -->
	<select id="recentPet" resultType="int">
		SELECT pet_id FROM pet
		WHERE user_id= #{userId}
		ORDER BY pet_id DESC
		LIMIT 1
	</select>
	
	<!-- 공개상태인 반려동물 조회 -->
	<select id="selectOpenPet" resultMap="PetMap">
		SELECT * FROM pet
		WHERE open = 1
		<include refid="searchPet"/>
		LIMIT #{pageStart}, 9
	</select>
	
	<!-- 공개 상태인 반려동물 수 -->
	<select id="countOpenPet" resultType="int">
		SELECT COUNT(*)
		FROM pet
		WHERE open = 1
		<include refid="searchPet"/>
	</select>
	
	
	
	<!-- ******관리자 페이지******* -->
	<!-- 전체 반려견 조회 -->
	<select id="AllPet" resultMap="PetMap">
		<!-- SELECT *, ((SELECT count(*) FROM lifetime_card WHERE pet_id=p.pet_id) + (SELECT count(*) FROM gallery WHERE pet_id=p.pet_id)) contents
		FROM pet p 
		WHERE pet_id=p.pet_id --> 
		SELECT p.pet_id, p.pet_name, p.user_id, p.pet_species, p.age, p.gender, p.instagram, p.youtube, p.open, 
		((SELECT count(*) FROM lifetime_card WHERE pet_id=p.pet_id) + (SELECT count(*) FROM gallery WHERE pet_id=p.pet_id)) contents, u.pet_letter  
		FROM pet p LEFT JOIN user u
		ON p.user_id = u.user_id
		WHERE pet_id=p.pet_id
		<include refid="searchPet"/>
		<include refid="orderPet"/>	
		LIMIT #{pageStart}, 20
	</select>
	
	<!-- 검색, 페이징 처리한 반려견 수 -->
	<select id="countAllPet" resultType="int">
		SELECT COUNT(*)
		FROM pet
		WHERE pet_id &gt; 0
		<include refid="searchPet"/>
	</select>
	
	<!-- 반려견 공개/비공개 전환 -->
	<update id="offPet">
		UPDATE pet
		SET open = #{open}
		WHERE pet_id = #{petId}
	</update>
	
	
	
	
	
</mapper>